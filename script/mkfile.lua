-- mkfile.lua: C++ヘッダーファイル (.hpp) 生成スクリプト

-- コマンドライン引数を取得
local args = { ... }

-- 1. ファイル名のチェック
if #args < 1 then
    print("Error: ファイル名を指定してください。")
    print("使用法: lua mkfile.lua <filename>")
    -- 例: lua mkfile.lua Timer
    os.exit(1)
end

-- 引数からファイル名を取得
local filename_base = args[1]
-- 💡 修正箇所: ここでディレクトリ名 "./src/" を加えます
local OUTPUT_DIR = "./src/"
local full_filename = OUTPUT_DIR .. filename_base .. ".hpp"
local cpp_filename = OUTPUT_DIR .. filename_base .. ".cpp"

-- ファイル名からインクルードガード用のマクロ文字列を生成
-- 例: Timer -> YYCG_TIMER_HPP
local guard_macro = "YYCG_" .. string.upper(filename_base) .. "_HPP"

-- 2. ヘッダーファイルの内容を定義
local content = [[// -------------------------------------------------------------------------------------------------------------------------------------//
//  _______  _______  _______  ___       ___       _______    ___       _______  _______             //
//  |       ||       ||       ||   |     |   |     |   _   |  |   |     |   _   ||   _   |           //
//  | _____||_   _|||  ___||   |     |   |     |  _  |  |   |     |  _  ||  |   |           //
//  | |_____   |   |  |  |___ |   |     |   |     |  |_|  |  |   |     |  |_|  ||  |   |           //
//  |_____  |  |   |  |  ___||   |___  |   |___  |   _   |  |   |___  |   _   ||  |   | ___         //
//   _____| |  |   |  |  |___ |       ||       ||  | |  |  |       ||  | |  ||  |___||  | SPDX-FileCopyrightText : 2025~ StellaLab.  //
//  |_______|  |___|  |_______||_______||_______||__| |__|  |_______||__| |__||_______||___| SPDX-License-Identifier: MIT            //
// -------------------------------------------------------------------------------------------------------------------------------------//
//  I am from a country where English is not my native language
//  The following explanation may contain inaccuracies. Please be aware of this.
// -------------------------------------------------------------------------------------------------------------------------------------//
// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆ Individual  Discription ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆ //
// -------------------------------------------------------------------------------------------------------------------------------------//
//
// -------------------------------------------------------------------------------------------------------------------------------------//
// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆ Common  Description ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆ //
// -------------------------------------------------------------------------------------------------------------------------------------//
// YYCG is a generator for creating action chains with the primary purpose of nipple teasing.
// Please refer to the reference for basic operation.
// URL: https://github.com/SoraMizunashi-st/YowaYowaChikubiGenerator
// For individual inquiries, please contact Mizunashi Sora. (StellaLab.)
// Email : shuiwukong6@gmail.com
// -------------------------------------------------------------------------------------------------------------------------------------//
// SENaM Project Coding Style and Naming Conventions
// This document outlines the standardized coding style and naming conventions for the SENaM C++ project.
// Consistent adherence to these rules ensures high readability, consistency, and maintainability across the codebase.
// -------------------------------------------------------------------------------------------------------------------------------------//
// I. Naming Conventions
// ・Classes, Structs, Enums, and Type Definitions: Use PascalCase (all words start with an uppercase letter).
// ・Member Variables: Prefix with a lowercase m (for member) and use PascalCase for the rest of the name.
// ・Static Variables: Prefix with a lowercase s (for static) and use PascalCase.
// ・Constant Variables: Prefix with a lowercase c (for Constant) and use PascalCase.
// ・Function/Method Arguments: Prefix with a lowercase p and use PascalCase for the rest of the name.
// ・Temporary/Local Variables: Prefix with a lowercase t (for temporary) and use PascalCase.
// ・Public Methods: Use PascalCase with no special prefix.
// -------------------------------------------------------------------------------------------------------------------------------------//
// II. Code Structure and Style
// Namespace Usage: All standard library entities must be referenced using their fully qualified names.
// Rule: Always use the std:: prefix.
// Class Definition Order: 
// The visibility sections within a class or struct must be defined in the following order to prioritize the user-facing interface:
// [1]public
// [2]private
// [3]protected (if applicable, typically placed last)
// General Principle: Prefer enum class for defining sets of named constants over macro definitions (#define) to ensure strong type safety.
// -------------------------------------------------------------------------------------------------------------------------------------//
// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆ License summary ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆ //
// -------------------------------------------------------------------------------------------------------------------------------------//
// SPDX-FileCopyrightText : 2025~ StellaLab.
// SPDX-License-Identifier: MIT
// -------------------------------------------------------------------------------------------------------------------------------------//
// Please read below for specific information about spdx licenses.
// https://spdx.dev/learn/handling-license-info/
// -------------------------------------------------------------------------------------------------------------------------------------//
// Include Guarde
// -------------------------------------------------------------------------------------------------------------------------------------//
#ifndef ]] .. guard_macro .. [[
#define ]] .. guard_macro .. [[
// -------------------------------------------------------------------------------------------------------------------------------------//
#ifdef __YYCG_BUILD__
// -------------------------------------------------------------------------------------------------------------------------------------//

// -------------------------------------------------------------------------------------------------------------------------------------//
#else
// -------------------------------------------------------------------------------------------------------------------------------------//
#define __DEBUG__
// -------------------------------------------------------------------------------------------------------------------------------------//
#endif
// -------------------------------------------------------------------------------------------------------------------------------------//

// -------------------------------------------------------------------------------------------------------------------------------------//
// Types Object Header
// -------------------------------------------------------------------------------------------------------------------------------------//

// -------------------------------------------------------------------------------------------------------------------------------------//
// Utility Object  Header
// -------------------------------------------------------------------------------------------------------------------------------------//

// -------------------------------------------------------------------------------------------------------------------------------------//


// -------------------------------------------------------------------------------------------------------------------------------------//
// Custom Object Header
// -------------------------------------------------------------------------------------------------------------------------------------//

// -------------------------------------------------------------------------------------------------------------------------------------//


// -------------------------------------------------------------------------------------------------------------------------------------//
// External Library Header
// -------------------------------------------------------------------------------------------------------------------------------------//

// -------------------------------------------------------------------------------------------------------------------------------------//

// -------------------------------------------------------------------------------------------------------------------------------------//
// Standard Library Header
// -------------------------------------------------------------------------------------------------------------------------------------//

// -------------------------------------------------------------------------------------------------------------------------------------//
// Include Guarde
// -------------------------------------------------------------------------------------------------------------------------------------//
#endif
// -------------------------------------------------------------------------------------------------------------------------------------//
]]

-- 3. ファイルへの書き込み
local file, err = io.open(full_filename, "w")
if not file then
    print("Error: ファイル '" .. full_filename .. "' を書き込み用に開けませんでした。")
    print("エラー詳細: " .. err)
    os.exit(1)
end

file:write(content)
file:close()

print("Success: ヘッダーファイル '" .. full_filename .. "' を作成しました。")
print("インクルードガード: " .. guard_macro)

-- CPPファイルの内容を定義
local cpp_content = [[// -------------------------------------------------------------------------------------------------------------------------------------//
// YYCK For C++
// Version  : 1.0.0
// Author   : Sora Mizunashi
// -------------------------------------------------------------------------------------------------------------------------------------//
// SPDX-FileCopyrightText : 2025~ StellaLab.
// SPDX-License-Identifier: MIT
// -------------------------------------------------------------------------------------------------------------------------------------//

#include "./]] .. filename_base .. [[.hpp"


]]

-- CPPファイルへの書き込み
local file_cpp, err_cpp = io.open(cpp_filename, "w")
if not file_cpp then
    print("Error: CPPファイル '" .. cpp_filename .. "' を書き込み用に開けませんでした。")
    print("エラー詳細: " .. err_cpp)
    os.exit(1)
end

file_cpp:write(cpp_content)
file_cpp:close()

print("Success: CPPファイル '" .. cpp_filename .. "' を作成しました。")
print("保存先: " .. cpp_filename)

-- スクリプト全体の正常終了
os.exit(0)